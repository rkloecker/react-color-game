{"version":3,"sources":["components/Card.js","components/Main.js","components/Navbar.js","helpers.js","App.js","serviceWorker.js","index.js"],"names":["Card","handleClick","_this","props","evalCards","card","_this$props","this","size","react_default","a","createElement","className","style","flex","concat","maxWidth","onClick","backgroundColor","col","Component","Main","_ref","cards","width","height","map","el","i","Card_Card","key","id","Navbar","setSize","bind","shuffle","length","j","Math","floor","random","getRandomColor","color","App","state","firstClicked","secondClicked","cnt","gameSize","initCards","Array","fill","Object","toConsumableArray","index","setState","areColorsEqual","removeCard","newCards","console","log","components_Navbar","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d5776b71.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Card extends Component {\r\n  handleClick = () => {\r\n    this.props.evalCards(this.props.card);\r\n  };\r\n  render() {\r\n    const { card, size } = this.props;\r\n    return (\r\n      <div\r\n        className=\"mt-2 \"\r\n        style={{ flex: `0 0 ${100 / size}%`, maxWidth: `${100 / size}%` }}\r\n      >\r\n        <div\r\n          onClick={this.handleClick}\r\n          style={{ backgroundColor: `${card.col}` }}\r\n          className=\"card-style\"\r\n        >\r\n          {/* {props.card.col} */}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport default ({ cards, evalCards, size }) => {\r\n  return (\r\n    <div\r\n      className=\"wrapper\"\r\n      style={{ width: `${size * 100}px`, height: `${size * 100}px` }}\r\n    >\r\n      <div className=\"row\">\r\n        {cards.map((el, i) => {\r\n          return (\r\n            <Card evalCards={evalCards} key={el.id} card={el} size={size} />\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nconst Navbar = props => (\r\n  <nav className=\"navbar navbar-expand py-2\">\r\n    <ul className=\"navbar-nav mx-auto\">\r\n      <li className=\"nav-item mr-4\">\r\n        <h1>Color Game</h1>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setSize.bind(this, 4)}\r\n          className=\"btn btn-success\"\r\n        >\r\n          4 x 4\r\n        </button>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button\r\n          onClick={props.setSize.bind(this, 6)}\r\n          className=\"btn btn-danger\"\r\n        >\r\n          6 x 6\r\n        </button>\r\n      </li>\r\n      <li className=\"nav-item mr-2\">\r\n        <button onClick={props.setSize.bind(this, 8)} className=\"btn btn-info\">\r\n          8 x 8\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","const shuffle = a => {\r\n  for (let i = a.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    [a[i], a[j]] = [a[j], a[i]];\r\n  }\r\n};\r\n\r\nconst getRandomColor = () => {\r\n  var letters = \"0123456789ABCDEF\";\r\n  var color = \"#\";\r\n  for (var i = 0; i < 6; i++) {\r\n    color += letters[Math.floor(Math.random() * 16)];\r\n  }\r\n  return color;\r\n};\r\n\r\nexport { shuffle, getRandomColor };\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Main from \"./components/Main\";\nimport Navbar from \"./components/Navbar\";\nimport { shuffle, getRandomColor } from \"./helpers\";\n\nclass App extends Component {\n  state = {\n    cards: [],\n    firstClicked: { id: null, col: null },\n    secondClicked: { id: null, col: null },\n    cnt: 0,\n    gameSize: 4\n  };\n\n  initCards = () => {\n    // set game size\n    // create 8 cards with different color\n    let cards = Array((this.state.gameSize * this.state.gameSize) / 2)\n      .fill()\n      .map(el => ({\n        col: getRandomColor()\n      }));\n    // duplicate cards\n    cards = [...cards, ...cards];\n    // shuffle Cards\n    shuffle(cards);\n    // add unique index\n    cards = cards.map((el, index) => ({\n      id: index,\n      col: el.col\n    }));\n    this.setState({ cards });\n  };\n\n  areColorsEqual = () => {\n    return (\n      this.state.firstClicked.col === this.state.secondClicked.col &&\n      this.state.firstClicked.id !== this.state.secondClicked.id\n    );\n  };\n\n  // if cards have same col set card bgcol to wrapper bgcol => card 'invisible'\n  removeCard = () => {\n    let newCards = [...this.state.cards];\n    if (this.areColorsEqual()) {\n      // console.log(\"same colors!\");\n      newCards[this.state.firstClicked.id].col = \"#272B30\";\n      newCards[this.state.secondClicked.id].col = \"#272B30\";\n      this.setState({ cards: newCards });\n    }\n  };\n\n  // picks a card and evaluates: 'removes' if eq col\n  evalCards = ({ id, col }) => {\n    if (this.state.cnt % 2 === 0) {\n      this.setState({ firstClicked: { id, col } }, this.removeCard);\n    } else {\n      this.setState({ secondClicked: { id, col } }, this.removeCard);\n    }\n    this.setState({ cnt: this.state.cnt + 1 });\n  };\n\n  setSize = size => {\n    console.log(size);\n    // reset state\n    this.setState(\n      {\n        cards: [],\n        firstClicked: { id: null, col: null },\n        secondClicked: { id: null, col: null },\n        cnt: 0,\n        gameSize: size\n      },\n      this.initCards\n    );\n  };\n\n  componentDidMount() {\n    this.initCards();\n  }\n  render() {\n    return (\n      <div className=\"\">\n        <Navbar setSize={this.setSize} />\n        <Main\n          cards={this.state.cards}\n          evalCards={this.evalCards}\n          size={this.state.gameSize}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}